// This file implements the IShellFolder2 Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"
#include "PyIShellFolder.h"
#include "PyIShellFolder2.h"

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIShellFolder2::PyIShellFolder2(IUnknown *pdisp):
	PyIShellFolder(pdisp)
{
	ob_type = &type;
}

PyIShellFolder2::~PyIShellFolder2()
{
}

/* static */ IShellFolder2 *PyIShellFolder2::GetI(PyObject *self)
{
	return (IShellFolder2 *)PyIShellFolder::GetI(self);
}

// @pymethod |PyIShellFolder2|GetDefaultSearchGUID|Description of GetDefaultSearchGUID.
PyObject *PyIShellFolder2::GetDefaultSearchGUID(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	GUID guid;
	// @pyparm <o PyGUID *>|pguid||Description for pguid
	if ( !PyArg_ParseTuple(args, ":GetDefaultSearchGUID") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISF2->GetDefaultSearchGUID( &guid );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );
	return PyWinObject_FromIID(guid);
}

// @pymethod |PyIShellFolder2|EnumSearches|Description of EnumSearches.
PyObject *PyIShellFolder2::EnumSearches(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	IEnumExtraSearch *penum;
	if ( !PyArg_ParseTuple(args, ":EnumSearches") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISF2->EnumSearches( &penum );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );

	return PyCom_PyObjectFromIUnknown(penum, IID_IEnumExtraSearch, FALSE);
}

// @pymethod |PyIShellFolder2|GetDefaultColumn|Description of GetDefaultColumn.
PyObject *PyIShellFolder2::GetDefaultColumn(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	DWORD reserved = 0;
	if ( !PyArg_ParseTuple(args, "|l:GetDefaultColumn", &reserved) )
		return NULL;
	ULONG sort, display;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISF2->GetDefaultColumn( reserved, &sort, &display);
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );
	return Py_BuildValue("ii", sort, display);
}

// @pymethod |PyIShellFolder2|GetDefaultColumnState|Description of GetDefaultColumnState.
PyObject *PyIShellFolder2::GetDefaultColumnState(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	// @pyparm int|iColumn||Description for iColumn
	UINT iColumn;
	if ( !PyArg_ParseTuple(args, "i:GetDefaultColumnState", &iColumn) )
		return NULL;
	SHCOLSTATEF flags;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISF2->GetDefaultColumnState( iColumn, &flags);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );
	return PyLong_FromUnsignedLong(flags);
}

// @pymethod |PyIShellFolder2|GetDetailsEx|Description of GetDetailsEx.
PyObject *PyIShellFolder2::GetDetailsEx(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	// @pyparm <o PyIDL>|pidl||Description for pidl
	SHCOLUMNID scid;
	PyObject *obpscid;
	// @pyparm <o Pyconst SHCOLUMNID *>|pscid||Description for pscid
	PyObject *obpidl;
	LPITEMIDLIST pidl;
	if ( !PyArg_ParseTuple(args, "OO:GetDetailsEx", &obpidl, &obpscid) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsPIDL(obpidl, &pidl)) bPythonIsHappy = FALSE;
	if (bPythonIsHappy && !PyObject_AsSHCOLUMNID(obpscid, &scid )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	VARIANT var;
	PY_INTERFACE_PRECALL;
	VariantInit(&var);
	hr = pISF2->GetDetailsEx( pidl, &scid, &var );
	PyObject_FreePIDL(pidl);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );
	PyObject *obRet = PyCom_PyObjectFromVariant(&var);
	VariantClear(&var);
	return obRet;
}

// @pymethod |PyIShellFolder2|GetDetailsOf|Description of GetDetailsOf.
PyObject *PyIShellFolder2::GetDetailsOf(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	// @pyparm <o PyIDL>|pidl||Description for pidl
	// @pyparm int|iColumn||Description for iColumn
	SHELLDETAILS sd;
	// @pyparm <o PySHELLDETAILS>|psd||Description for psd
	PyObject *obpidl;
	LPITEMIDLIST pidl;
	UINT iColumn;
	if ( !PyArg_ParseTuple(args, "Oi:GetDetailsOf", &obpidl, &iColumn) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (!PyObject_AsPIDL(obpidl, &pidl))
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISF2->GetDetailsOf( pidl, iColumn, &sd );
	PyObject_FreePIDL(pidl);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );
	return Py_BuildValue("((iiN))", sd.fmt, sd.cxChar, PyObject_FromSTRRET(&sd.str, pidl, TRUE));
}

// @pymethod |PyIShellFolder2|MapColumnToSCID|Description of MapColumnToSCID.
PyObject *PyIShellFolder2::MapColumnToSCID(PyObject *self, PyObject *args)
{
	IShellFolder2 *pISF2 = GetI(self);
	if ( pISF2 == NULL )
		return NULL;
	// @pyparm int|iColumn||Description for iColumn
	SHCOLUMNID scid;
	UINT iColumn;
	if ( !PyArg_ParseTuple(args, "i:MapColumnToSCID", &iColumn) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISF2->MapColumnToSCID( iColumn, &scid );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISF2, IID_IShellFolder2 );
	return PyObject_FromSHCOLUMNID(&scid);
}

// @object PyIShellFolder2|Description of the interface
static struct PyMethodDef PyIShellFolder2_methods[] =
{
	{ "GetDefaultSearchGUID", PyIShellFolder2::GetDefaultSearchGUID, 1 }, // @pymeth GetDefaultSearchGUID|Description of GetDefaultSearchGUID
	{ "EnumSearches", PyIShellFolder2::EnumSearches, 1 }, // @pymeth EnumSearches|Description of EnumSearches
	{ "GetDefaultColumn", PyIShellFolder2::GetDefaultColumn, 1 }, // @pymeth GetDefaultColumn|Description of GetDefaultColumn
	{ "GetDefaultColumnState", PyIShellFolder2::GetDefaultColumnState, 1 }, // @pymeth GetDefaultColumnState|Description of GetDefaultColumnState
	{ "GetDetailsEx", PyIShellFolder2::GetDetailsEx, 1 }, // @pymeth GetDetailsEx|Description of GetDetailsEx
	{ "GetDetailsOf", PyIShellFolder2::GetDetailsOf, 1 }, // @pymeth GetDetailsOf|Description of GetDetailsOf
	{ "MapColumnToSCID", PyIShellFolder2::MapColumnToSCID, 1 }, // @pymeth MapColumnToSCID|Description of MapColumnToSCID
	{ NULL }
};

PyComTypeObject PyIShellFolder2::type("PyIShellFolder2",
		&PyIShellFolder::type,
		sizeof(PyIShellFolder2),
		PyIShellFolder2_methods,
		GET_PYCOM_CTOR(PyIShellFolder2));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP PyGShellFolder2::ParseDisplayName(
		/* [unique][in] */ HWND hwndOwner,
		/* [unique][in] */ LPBC pbcReserved,
		/* [unique][in] */ LPOLESTR lpszDisplayName,
		/* [out] */ ULONG __RPC_FAR * pchEaten,
		/* [out] */ LPITEMIDLIST *ppidl,
		/* [out] */ ULONG __RPC_FAR * pdwAttributes)
{
	return PyGShellFolder::ParseDisplayName(hwndOwner, pbcReserved, lpszDisplayName, pchEaten, ppidl, pdwAttributes);
}

STDMETHODIMP PyGShellFolder2::EnumObjects(
		/* [unique][in] */ HWND hwndOwner,
		/* [unique][in] */ DWORD grfFlags,
		/* [out] */ IEnumIDList __RPC_FAR ** ppeidl)
{
	return PyGShellFolder::EnumObjects(hwndOwner, grfFlags, ppeidl);
}

STDMETHODIMP PyGShellFolder2::BindToObject(
		/* [unique][in] */ LPCITEMIDLIST pidl,
		/* [unique][in] */ LPBC pbcReserved,
		/* [unique][in] */ REFIID riid,
		/* [out] */ void ** out)
{
	return PyGShellFolder::BindToObject(pidl, pbcReserved, riid, out);
}

STDMETHODIMP PyGShellFolder2::BindToStorage(
		/* [unique][in] */ LPCITEMIDLIST pidl,
		/* [unique][in] */ LPBC pbcReserved,
		/* [unique][in] */ REFIID riid,
		/* [out] */ void **ppRet)
{
	return PyGShellFolder::BindToStorage(pidl, pbcReserved, riid, ppRet);
}

STDMETHODIMP PyGShellFolder2::CompareIDs(
		/* [unique][in] */ LPARAM lparam,
		/* [unique][in] */ LPCITEMIDLIST pidl1,
		/* [unique][in] */ LPCITEMIDLIST pidl2)
{
	return PyGShellFolder::CompareIDs(lparam, pidl1, pidl2);
}

STDMETHODIMP PyGShellFolder2::CreateViewObject(
		/* [unique][in] */ HWND hwndOwner,
		/* [unique][in] */ REFIID riid,
		/* [out] */ void **ppRet)
{
	return PyGShellFolder::CreateViewObject(hwndOwner, riid, ppRet);
}

STDMETHODIMP PyGShellFolder2::GetAttributesOf(
		/* [unique][in] */ UINT cidl,
		/* [unique][in] */ LPCITEMIDLIST *apidl,
		/* [unique][in][out] */ ULONG __RPC_FAR * rgfInOut)
{
	return PyGShellFolder::GetAttributesOf(cidl, apidl, rgfInOut);
}

STDMETHODIMP PyGShellFolder2::GetUIObjectOf(
		/* [unique][in] */ HWND hwndOwner,
		/* [unique][in] */ UINT cidl,
		/* [unique][in] */ LPCITEMIDLIST *apidl,
		/* [unique][in] */ REFIID riid,
		/* [unique][in][out] */ UINT * rgfInOut,
		/* [out] */ void ** ppRet)
{
	return PyGShellFolder::GetUIObjectOf(hwndOwner, cidl, apidl, riid, rgfInOut, ppRet);
}

STDMETHODIMP PyGShellFolder2::GetDisplayNameOf(
		/* [unique][in] */ LPCITEMIDLIST pidl,
		/* [unique][in] */ SHGDNF uFlags,
		/* [out] */ STRRET __RPC_FAR * out)
{
	return PyGShellFolder::GetDisplayNameOf(pidl, uFlags, out);
}

STDMETHODIMP PyGShellFolder2::SetNameOf(
		/* [in] */ HWND hwnd,
		/* [in] */ LPCITEMIDLIST pidl,
		/* [string][in] */ LPCOLESTR pszName,
		/* [in] */ SHGDNF uFlags,
		/* [out] */ LPITEMIDLIST *ppidlOut)
{
	return PyGShellFolder::SetNameOf(hwnd, pidl, pszName, uFlags, ppidlOut);
}

// IShellFolder2 methods.
STDMETHODIMP PyGShellFolder2::GetDefaultSearchGUID(
		/* [out] */ GUID * pguid)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDefaultSearchGUID", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	if (!PyWinObject_AsIID(result, pguid))
		hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDefaultSearchGUID");
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellFolder2::EnumSearches(
		/* [out] */ IEnumExtraSearch ** ppenum)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("EnumSearches", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppenum;
	if (!PyArg_Parse(result, "O" , &obppenum))
		return MAKE_PYCOM_GATEWAY_FAILURE_CODE("EnumSearches");
	if (result == Py_None) {
		hr = S_FALSE;
		*ppenum = NULL;
	} else {
		if (!PyCom_InterfaceFromPyInstanceOrObject(obppenum, IID_IEnumExtraSearch, (void **)ppenum, TRUE /* bNoneOK */))
			hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("EnumSearches");
	}
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellFolder2::GetDefaultColumn(
		/* [in] */ DWORD dwRes,
		/* [out] */ ULONG * pSort,
		/* [out] */ ULONG * pDisplay)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDefaultColumn", &result, "l", dwRes);
	if (FAILED(hr)) return hr;
	if (!PyArg_ParseTuple(result, "ll:GetDefaultColumn result", pSort, pDisplay))
		hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDefaultColumn");
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellFolder2::GetDefaultColumnState(
		/* [in] */ UINT iColumn,
		/* [out] */ SHCOLSTATEF * pcsFlags)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDefaultColumnState", &result, "i", iColumn);
	if (FAILED(hr)) return hr;
	*pcsFlags = PyLong_AsUnsignedLongMask(result);
	hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDefaultColumnState");
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellFolder2::GetDetailsEx(
		/* [in] */ LPCITEMIDLIST pidl,
		/* [in] */ const SHCOLUMNID * pscid,
		/* [out] */ VARIANT * pv)
{
	PY_GATEWAY_METHOD;
	PyObject *obpscid = PyObject_FromSHCOLUMNID(pscid);
	if (obpscid==NULL) return MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDetailsEx");
	PyObject *obpidl;
	obpidl = PyObject_FromPIDL(pidl, FALSE);
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDetailsEx", &result, "OO", obpidl, obpscid);
	Py_XDECREF(obpidl);
	Py_DECREF(obpscid);
	if (FAILED(hr)) return hr;
	if (!PyCom_VariantFromPyObject(result, pv))
		hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDetailsEx");
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellFolder2::GetDetailsOf(
		/* [in] */ LPCITEMIDLIST pidl,
		/* [in] */ UINT iColumn,
		/* [out] */ SHELLDETAILS * psd)
{
	PY_GATEWAY_METHOD;
	PyObject *obpidl;
	obpidl = PyObject_FromPIDL(pidl, FALSE);
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDetailsOf", &result, "Oi", obpidl, iColumn);
	Py_XDECREF(obpidl);
	if (FAILED(hr)) return hr;
	PyObject *obstr;
	if (!PyArg_ParseTuple(result, "iiO:GetDetailsOf result", &psd->fmt, &psd->cxChar, &obstr))
		hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDetailsOf");
	else {
		psd->str.uType = STRRET_WSTR;
		if (!PyWinObject_AsPfnAllocatedWCHAR(obstr, PyShell_AllocMem, &psd->str.pOleStr))
			hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetDetailsOf");
	}
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellFolder2::MapColumnToSCID(
		/* [in] */ UINT iColumn,
		/* [in] */ SHCOLUMNID * pscid)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("MapColumnToSCID", &result, "i", iColumn);
	if (FAILED(hr)) return hr;
	if (!PyObject_AsSHCOLUMNID(result, pscid))
		hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("MapColumnToSCID");
	Py_DECREF(result);
	return hr;
}
