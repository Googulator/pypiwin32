// This file implements the IQueryAssociations Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"

// The shlwapi.h included with MSVC6 does not have this interface.
// A default Microsoft SDK does not provide an updated shlwapi.h file
// (even though the SDK on mhammond's machine does!).  Rather than
// try and figure out these header versions, just copy the interface
// definition here.
// #include "shlwapi.h"

// *** - start of shlwapi.h clone
enum {
    ASSOCF_INIT_NOREMAPCLSID           = 0x00000001,  //  do not remap clsids to progids
    ASSOCF_INIT_BYEXENAME              = 0x00000002,  //  executable is being passed in
    ASSOCF_OPEN_BYEXENAME              = 0x00000002,  //  executable is being passed in
    ASSOCF_INIT_DEFAULTTOSTAR          = 0x00000004,  //  treat "*" as the BaseClass
    ASSOCF_INIT_DEFAULTTOFOLDER        = 0x00000008,  //  treat "Folder" as the BaseClass
    ASSOCF_NOUSERSETTINGS              = 0x00000010,  //  dont use HKCU
    ASSOCF_NOTRUNCATE                  = 0x00000020,  //  dont truncate the return string
    ASSOCF_VERIFY                      = 0x00000040,  //  verify data is accurate (DISK HITS)
    ASSOCF_REMAPRUNDLL                 = 0x00000080,  //  actually gets info about rundlls target if applicable
    ASSOCF_NOFIXUPS                    = 0x00000100,  //  attempt to fix errors if found
    ASSOCF_IGNOREBASECLASS             = 0x00000200,  //  dont recurse into the baseclass
};
typedef DWORD ASSOCF;
#define LWSTDAPI          STDAPI
typedef enum {} ASSOCSTR;
typedef enum {} ASSOCKEY;
typedef enum {} ASSOCDATA;
typedef enum {} ASSOCENUM;
#undef INTERFACE
#define INTERFACE IQueryAssociations

DECLARE_INTERFACE_( IQueryAssociations, IUnknown )
{
    // IUnknown methods
    STDMETHOD (QueryInterface)(THIS_ REFIID riid, void **ppv) PURE;
    STDMETHOD_(ULONG, AddRef) ( THIS ) PURE;
    STDMETHOD_(ULONG, Release) ( THIS ) PURE;

    // IQueryAssociations methods
    STDMETHOD (Init)(THIS_ ASSOCF flags, LPCWSTR pszAssoc, HKEY hkProgid, HWND hwnd) PURE;
    STDMETHOD (GetString)(THIS_ ASSOCF flags, ASSOCSTR str, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut) PURE;
    STDMETHOD (GetKey)(THIS_ ASSOCF flags, ASSOCKEY key, LPCWSTR pszExtra, HKEY *phkeyOut) PURE;
    STDMETHOD (GetData)(THIS_ ASSOCF flags, ASSOCDATA data, LPCWSTR pszExtra, LPVOID pvOut, DWORD *pcbOut) PURE;
    STDMETHOD (GetEnum)(THIS_ ASSOCF flags, ASSOCENUM assocenum, LPCWSTR pszExtra, REFIID riid, LPVOID *ppvOut) PURE;
};

LWSTDAPI AssocCreate(CLSID clsid, REFIID riid, LPVOID *ppv);
// *** - end of shlwapi.h clone

#include "PyIQueryAssociations.h"

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIQueryAssociations::PyIQueryAssociations(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIQueryAssociations::~PyIQueryAssociations()
{
}

/* static */ IQueryAssociations *PyIQueryAssociations::GetI(PyObject *self)
{
	return (IQueryAssociations *)PyIUnknown::GetI(self);
}

// @pymethod |PyIQueryAssociations|Init|Initializes the IQueryAssociations interface and sets the root key to the appropriate ProgID.
PyObject *PyIQueryAssociations::Init(PyObject *self, PyObject *args)
{
	IQueryAssociations *pIQA = GetI(self);
	if ( pIQA == NULL )
		return NULL;
	// @pyparm int|flags||
    // @pyparm string|assoc||The string data (ie, extension, prog-id, etc)
    // @pyparm <o PyHANDLE>|hkeyProgId|0|
    // @pyparm int|hwnd|0|Must be 0
    int flags, hwnd=0, hkProgid = 0;
    PyObject *obAssoc;
    WCHAR *pszAssoc = NULL;
	if (!PyArg_ParseTuple(args, "lO|ll:Init", &flags, &obAssoc, &hkProgid, &hwnd))
		return NULL;
	if (!PyWinObject_AsWCHAR(obAssoc, &pszAssoc, TRUE))
        return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIQA->Init( flags, pszAssoc, (HKEY)hkProgid, (HWND)hwnd);
	PyWinObject_FreeWCHAR(pszAssoc);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIQA, IID_IQueryAssociations );
	Py_INCREF(Py_None);
	return Py_None;
}

// XXX - GetData not implemented - memory management unclear - XXX

// @pymethod int|PyIQueryAssociations|GetKey|Searches for and retrieves a file association-related key from the registry.
PyObject *PyIQueryAssociations::GetKey(PyObject *self, PyObject *args)
{
	IQueryAssociations *pIQA = GetI(self);
	if ( pIQA == NULL )
		return NULL;
	// @pyparm int|flags||Used to control the search. 
	// @pyparm int|assocKey||Specifies the type of key that is to be returned.
    // @pyparm string||extra|Optional string with information about the location of the key.
    // It is normally set to a shell verb such as 'open'. Set this parameter to None if it is not used. 
    int flags, assoc;
    PyObject *obExtra = Py_None;
    HKEY ret = NULL;
    WCHAR *pszExtra= NULL;
	if (!PyArg_ParseTuple(args, "ll|O:GetKey", &flags, &assoc, &obExtra))
		return NULL;
	if (!PyWinObject_AsWCHAR(obExtra, &pszExtra, TRUE))
        return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIQA->GetKey( flags, (ASSOCKEY)assoc, pszExtra, &ret);
	PyWinObject_FreeWCHAR(pszExtra);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIQA, IID_IQueryAssociations );
    return PyLong_FromVoidPtr(ret);
}

// @pymethod int|PyIQueryAssociations|GetString|Searches for and retrieves a file association-related string from the registry.
PyObject *PyIQueryAssociations::GetString(PyObject *self, PyObject *args)
{
	IQueryAssociations *pIQA = GetI(self);
	if ( pIQA == NULL )
		return NULL;
	// @pyparm int|flags||Used to control the search. 
	// @pyparm int|assocStr||Specifies the type of string that is to be returned.
    // @pyparm string||extra|Optional string with information about the location of the key.
    // It is normally set to a shell verb such as 'open'. Set this parameter to None if it is not used. 
    int flags, assoc;
    PyObject *obExtra = Py_None;
    HKEY *ret = NULL;
    WCHAR *pszExtra= NULL;
	if (!PyArg_ParseTuple(args, "ll|O:GetString", &flags, &assoc, &obExtra))
		return NULL;
    // @comm Note that ASSOCF_NOTRUNCATE semantics are currently not supported -
    // the buffer passed is 2048 bytes long, and will be truncated by the
    // shell if too small.
    WCHAR result_buf[2048];
    DWORD result_size = sizeof(result_buf) / sizeof(result_buf[0]);
    if (flags & ASSOCF_NOTRUNCATE)
        return PyErr_Format(PyExc_ValueError, "Can not set ASSOCF_NOTRUNCATE - these semantics are not supported");
	if (!PyWinObject_AsWCHAR(obExtra, &pszExtra, TRUE))
        return NULL;
    
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIQA->GetString( flags, (ASSOCSTR)assoc, pszExtra, result_buf, &result_size);
	PyWinObject_FreeWCHAR(pszExtra);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIQA, IID_IQueryAssociations );
    // docs don't explicitly say if result_size includes NULL.  It says:
    // "will be set to the number of characters actually placed in the buffer"
    return PyWinObject_FromWCHAR(result_buf, result_size-1);
}

// @object PyIQueryAssociations|Description of the interface
static struct PyMethodDef PyIQueryAssociations_methods[] =
{
	{ "Init", PyIQueryAssociations::Init, 1 }, // @pymeth Init|Initializes the IQueryAssociations interface and sets the root key to the appropriate ProgID.
	{ "GetKey", PyIQueryAssociations::GetKey, 1 }, // @pymeth GetKey|Searches for and retrieves a file association-related key from the registry.
    { "GetString", PyIQueryAssociations::GetString, 1 }, // @pymeth GetString|Searches for and retrieves a file association-related string from the registry.
	{ NULL }
};

PyComTypeObject PyIQueryAssociations::type("PyIQueryAssociations",
		&PyIUnknown::type,
		sizeof(PyIQueryAssociations),
		PyIQueryAssociations_methods,
		GET_PYCOM_CTOR(PyIQueryAssociations));
