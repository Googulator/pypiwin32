// This file implements the IShellItem Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"
#include "PyIShellItem.h"

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIShellItem::PyIShellItem(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIShellItem::~PyIShellItem()
{
}

/* static */ IShellItem *PyIShellItem::GetI(PyObject *self)
{
	return (IShellItem *)PyIUnknown::GetI(self);
}

// @pymethod |PyIShellItem|BindToHandler|Description of BindToHandler.
PyObject *PyIShellItem::BindToHandler(PyObject *self, PyObject *args)
{
	IShellItem *pISI = GetI(self);
	if ( pISI == NULL )
		return NULL;
	// @pyparm <o PyIBindCtx>|pbc||Description for pbc
	// @pyparm <o PyIID>|bhid||Description for bhid
	// @pyparm <o PyIID>|riid||Description for riid
	PyObject *obpbc;
	PyObject *obbhid;
	PyObject *obriid;
	IBindCtx *pbc;
	IID bhid;
	IID riid;
	void *pv;
	if ( !PyArg_ParseTuple(args, "OOO:BindToHandler", &obpbc, &obbhid, &obriid) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obpbc, IID_IBindCtx, (void **)&pbc, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!PyWinObject_AsIID(obbhid, &bhid)) bPythonIsHappy = FALSE;
	if (!PyWinObject_AsIID(obriid, &riid)) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISI->BindToHandler( pbc, bhid, riid, &pv );
	if (pbc) pbc->Release();

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISI, IID_IShellItem );
	return PyCom_PyObjectFromIUnknown((IUnknown *)pv, riid, FALSE);
}

// @pymethod |PyIShellItem|GetParent|Description of GetParent.
PyObject *PyIShellItem::GetParent(PyObject *self, PyObject *args)
{
	IShellItem *pISI = GetI(self);
	if ( pISI == NULL )
		return NULL;
	IShellItem *psi;
	if ( !PyArg_ParseTuple(args, ":GetParent") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISI->GetParent( &psi );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISI, IID_IShellItem );
	return PyCom_PyObjectFromIUnknown(psi, IID_IShellItem, FALSE);
}

// @pymethod |PyIShellItem|GetDisplayName|Description of GetDisplayName.
PyObject *PyIShellItem::GetDisplayName(PyObject *self, PyObject *args)
{
	IShellItem *pISI = GetI(self);
	if ( pISI == NULL )
		return NULL;
	SIGDN sigdnName;
	// @pyparm int|sigdnName||Description for sigdnName
	if ( !PyArg_ParseTuple(args, "k:GetDisplayName", &sigdnName) )
		return NULL;
	HRESULT hr;
	WCHAR *sz;
	PY_INTERFACE_PRECALL;
	hr = pISI->GetDisplayName( sigdnName, &sz );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISI, IID_IShellItem );
	PyObject *ret = PyWinObject_FromWCHAR(sz);
	CoTaskMemFree(sz);
	return ret;
}

// @pymethod |PyIShellItem|GetAttributes|Description of GetAttributes.
PyObject *PyIShellItem::GetAttributes(PyObject *self, PyObject *args)
{
	IShellItem *pISI = GetI(self);
	if ( pISI == NULL )
		return NULL;
	SFGAOF sfgaoMask;
	SFGAOF ret;
	// @pyparm <o PySFGAOF>|sfgaoMask||Description for sfgaoMask
	if ( !PyArg_ParseTuple(args, "k:GetAttributes", &sfgaoMask) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISI->GetAttributes( sfgaoMask, &ret);
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISI, IID_IShellItem );
	return PyLong_FromUnsignedLong(ret);
}

// @pymethod |PyIShellItem|Compare|Description of Compare.
PyObject *PyIShellItem::Compare(PyObject *self, PyObject *args)
{
	IShellItem *pISI = GetI(self);
	if ( pISI == NULL )
		return NULL;
	// @pyparm <o PyIShellItem>|psi||Description for psi
	SICHINTF hint;
	// @pyparm int|hint||Description for hint
	PyObject *obpsi;
	IShellItem *psi;
	if ( !PyArg_ParseTuple(args, "Oi:Compare", &obpsi, &hint) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obpsi, IID_IShellItem, (void **)&psi, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	int iOrder;
	PY_INTERFACE_PRECALL;
	hr = pISI->Compare( psi, hint, &iOrder );
	if (psi) psi->Release();
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISI, IID_IShellItem );
	return PyInt_FromLong(iOrder);
}

// @object PyIShellItem|Description of the interface
static struct PyMethodDef PyIShellItem_methods[] =
{
	{ "BindToHandler", PyIShellItem::BindToHandler, 1 }, // @pymeth BindToHandler|Description of BindToHandler
	{ "GetParent", PyIShellItem::GetParent, 1 }, // @pymeth GetParent|Description of GetParent
	{ "GetDisplayName", PyIShellItem::GetDisplayName, 1 }, // @pymeth GetDisplayName|Description of GetDisplayName
	{ "GetAttributes", PyIShellItem::GetAttributes, 1 }, // @pymeth GetAttributes|Description of GetAttributes
	{ "Compare", PyIShellItem::Compare, 1 }, // @pymeth Compare|Description of Compare
	{ NULL }
};

PyComTypeObject PyIShellItem::type("PyIShellItem",
		&PyIUnknown::type,
		sizeof(PyIShellItem),
		PyIShellItem_methods,
		GET_PYCOM_CTOR(PyIShellItem));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP PyGShellItem::BindToHandler(
		/* [unique][in] */ IBindCtx * pbc,
		/* [in] */ REFGUID bhid,
		/* [in] */ REFIID riid,
		/* [iid_is][out] */ void ** ppv)
{
	PY_GATEWAY_METHOD;
	PyObject *obpbc;
	PyObject *obbhid;
	PyObject *obriid;
	obpbc = PyCom_PyObjectFromIUnknown(pbc, IID_IBindCtx, TRUE);
	obbhid = PyWinObject_FromIID(bhid);
	obriid = PyWinObject_FromIID(riid);
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("BindToHandler", &result, "OOO", obpbc, obbhid, obriid);
	Py_XDECREF(obpbc);
	Py_XDECREF(obbhid);
	Py_XDECREF(obriid);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppv;
	if (!PyArg_Parse(result, "O" , &obppv))
		return MAKE_PYCOM_GATEWAY_FAILURE_CODE("BindToHandler");
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obppv, riid, (void **)ppv, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("BindToHandler");
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellItem::GetParent(
		/* [out] */ IShellItem ** ppsi)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetParent", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppsi;
	if (!PyArg_Parse(result, "O" , &obppsi))
		return MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetParent");
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obppsi, IID_IShellItem, (void **)ppsi, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetParent");
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellItem::GetDisplayName(
		/* [in] */ SIGDN sigdnName,
		/* [string][out] */ LPWSTR * ppszName)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDisplayName", &result, "k", sigdnName);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	if (!PyWinObject_AsPfnAllocatedWCHAR(result, PyShell_AllocMem, ppszName))
		hr = PyCom_SetAndLogCOMErrorFromPyException("GetDisplayName", IID_IShellItem);
	Py_DECREF(result);
	return hr;

}

STDMETHODIMP PyGShellItem::GetAttributes(
		/* [in] */ SFGAOF sfgaoMask,
		/* [out] */ SFGAOF * psfgaoAttribs)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetAttributes", &result, "k", sfgaoMask);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	*psfgaoAttribs = PyLong_AsUnsignedLongMask(result);
	hr = PyCom_SetAndLogCOMErrorFromPyException("GetAttributes", IID_IShellItem);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellItem::Compare(
		/* [in] */ IShellItem * psi,
		/* [in] */ SICHINTF hint,
		/* [out] */ int * piOrder)
{
	PY_GATEWAY_METHOD;
	PyObject *obpsi;
	obpsi = PyCom_PyObjectFromIUnknown(psi, IID_IShellItem, TRUE);
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("Compare", &result, "Ok", obpsi, hint);
	Py_XDECREF(obpsi);
	if (FAILED(hr)) return hr;
	*piOrder = PyInt_AsLong(result);
	hr = PyCom_SetAndLogCOMErrorFromPyException("Compare", IID_IShellItem);
	Py_DECREF(result);
	return hr;
}

