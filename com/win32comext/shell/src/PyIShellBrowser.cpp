// This file implements the IShellBrowser Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"
#include "PyIOleWindow.h"
#include "PyIShellBrowser.h"

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
extern BOOL PyObject_AsOLEMENUGROUPWIDTHS( PyObject *oblpMenuWidths, OLEMENUGROUPWIDTHS *pWidths);
PyObject *PyObject_FromOLEMENUGROUPWIDTHS(OLEMENUGROUPWIDTHS *p);

// Interface Implementation

PyIShellBrowser::PyIShellBrowser(IUnknown *pdisp):
	PyIOleWindow(pdisp)
{
	ob_type = &type;
}

PyIShellBrowser::~PyIShellBrowser()
{
}

/* static */ IShellBrowser *PyIShellBrowser::GetI(PyObject *self)
{
	return (IShellBrowser *)PyIOleWindow::GetI(self);
}

// @pymethod |PyIShellBrowser|InsertMenusSB|Description of InsertMenusSB.
PyObject *PyIShellBrowser::InsertMenusSB(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|hmenuShared||Description for hmenuShared
	OLEMENUGROUPWIDTHS menuWidths;
	PyObject *obMenuWidths;
	// @pyparm <o PyLPOLEMENUGROUPWIDTHS>|lpMenuWidths||Description for lpMenuWidths
	INT ihmenuShared;
	HMENU hmenuShared;
	if ( !PyArg_ParseTuple(args, "iO:InsertMenusSB", &ihmenuShared, &obMenuWidths) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	hmenuShared = (HMENU)ihmenuShared;
	if (bPythonIsHappy && !PyObject_AsOLEMENUGROUPWIDTHS( obMenuWidths, &menuWidths )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->InsertMenusSB( hmenuShared, &menuWidths );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	return PyObject_FromOLEMENUGROUPWIDTHS(&menuWidths);
}

// @pymethod |PyIShellBrowser|SetMenuSB|Description of SetMenuSB.
PyObject *PyIShellBrowser::SetMenuSB(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|hmenuShared||Description for hmenuShared
	// @pyparm int|holemenuRes||Description for holemenuRes
	// @pyparm HWND|hwndActiveObject||Description for hwndActiveObject
	INT ihmenuShared;
	INT iholemenuRes;
	HMENU hmenuShared;
	HOLEMENU holemenuRes;
	HWND hwndActiveObject;
	if ( !PyArg_ParseTuple(args, "iil:SetMenuSB", &ihmenuShared, &iholemenuRes, &hwndActiveObject) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	hmenuShared = (HMENU)ihmenuShared;
	holemenuRes = (HOLEMENU)iholemenuRes;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->SetMenuSB( hmenuShared, holemenuRes, hwndActiveObject );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellBrowser|RemoveMenusSB|Description of RemoveMenusSB.
PyObject *PyIShellBrowser::RemoveMenusSB(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|hmenuShared||Description for hmenuShared
	INT ihmenuShared;
	HMENU hmenuShared;
	if ( !PyArg_ParseTuple(args, "i:RemoveMenusSB", &ihmenuShared) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	hmenuShared = (HMENU)ihmenuShared;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->RemoveMenusSB( hmenuShared );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellBrowser|SetStatusTextSB|Description of SetStatusTextSB.
PyObject *PyIShellBrowser::SetStatusTextSB(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm <o unicode>|pszStatusText||Description for pszStatusText
	PyObject *obpszStatusText;
	LPOLESTR pszStatusText;
	if ( !PyArg_ParseTuple(args, "O:SetStatusTextSB", &obpszStatusText) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinObject_AsBstr(obpszStatusText, &pszStatusText)) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->SetStatusTextSB( pszStatusText );
	SysFreeString(pszStatusText);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellBrowser|EnableModelessSB|Description of EnableModelessSB.
PyObject *PyIShellBrowser::EnableModelessSB(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|fEnable||Description for fEnable
	BOOL fEnable;
	if ( !PyArg_ParseTuple(args, "i:EnableModelessSB", &fEnable) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->EnableModelessSB( fEnable );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellBrowser|TranslateAcceleratorSB|Description of TranslateAcceleratorSB.
PyObject *PyIShellBrowser::TranslateAcceleratorSB(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
// *** The input argument pmsg of type "MSG *" was not processed ***
//     Please check the conversion function is appropriate and exists!
	MSG msg;
	PyObject *obpmsg;
	// @pyparm <o PyMSG>|pmsg||Description for pmsg
	// @pyparm int|wID||Description for wID
	INT iwID;
	WORD wID;
	if ( !PyArg_ParseTuple(args, "Oi:TranslateAcceleratorSB", &obpmsg, &iwID) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsMSG( obpmsg, &msg )) bPythonIsHappy = FALSE;
	wID = iwID;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->TranslateAcceleratorSB( &msg, wID );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIShellBrowser|BrowseObject|Description of BrowseObject.
PyObject *PyIShellBrowser::BrowseObject(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm <o PyIDL>|pidl||Description for pidl
	// @pyparm int|wFlags||Description for wFlags
	PyObject *obpidl;
	LPITEMIDLIST pidl;
	UINT wFlags;
	if ( !PyArg_ParseTuple(args, "Oi:BrowseObject", &obpidl, &wFlags) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsPIDL(obpidl, &pidl, FALSE)) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->BrowseObject( pidl, wFlags );
	PyObject_FreePIDL(pidl);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIShellBrowser|GetViewStateStream|Description of GetViewStateStream.
PyObject *PyIShellBrowser::GetViewStateStream(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|grfMode||Description for grfMode
	DWORD grfMode;
	IStream * ppStrm;
	if ( !PyArg_ParseTuple(args, "l:GetViewStateStream", &grfMode) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->GetViewStateStream( grfMode, &ppStrm );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	return PyCom_PyObjectFromIUnknown(ppStrm, IID_IStream, FALSE);
}

// @pymethod |PyIShellBrowser|GetControlWindow|Description of GetControlWindow.
PyObject *PyIShellBrowser::GetControlWindow(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|id||Description for id
	UINT id;
	if ( !PyArg_ParseTuple(args, "i:GetControlWindow", &id) )
		return NULL;
	HWND hwnd;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->GetControlWindow( id, &hwnd );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	return PyLong_FromVoidPtr(hwnd);
}

// @pymethod |PyIShellBrowser|SendControlMsg|Description of SendControlMsg.
PyObject *PyIShellBrowser::SendControlMsg(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm int|id||Description for id
	// @pyparm int|uMsg||Description for uMsg
	// @pyparm int|wParam||Description for wParam
	// @pyparm long|lParam||Description for lParam
	UINT id;
	UINT uMsg;
	WPARAM wParam;
	LPARAM lParam;
	if ( !PyArg_ParseTuple(args, "iiil:SendControlMsg", &id, &uMsg, &wParam, &lParam) )
		return NULL;
	HRESULT hr;
	LRESULT ret;
	PY_INTERFACE_PRECALL;
	hr = pISB->SendControlMsg( id, uMsg, wParam, lParam, &ret );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	return PyInt_FromLong(ret);
}

// @pymethod |PyIShellBrowser|QueryActiveShellView|Description of QueryActiveShellView.
PyObject *PyIShellBrowser::QueryActiveShellView(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	IShellView * ppshv;
	if ( !PyArg_ParseTuple(args, ":QueryActiveShellView") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->QueryActiveShellView( &ppshv );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	return PyCom_PyObjectFromIUnknown(ppshv, IID_IShellView, FALSE);
}

// @pymethod |PyIShellBrowser|OnViewWindowActive|Description of OnViewWindowActive.
PyObject *PyIShellBrowser::OnViewWindowActive(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
	// @pyparm <o PyIShellView>|pshv||Description for pshv
	PyObject *obpshv;
	IShellView *pshv;
	if ( !PyArg_ParseTuple(args, "O:OnViewWindowActive", &obpshv) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obpshv, IID_IShellView, (void **)&pshv, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->OnViewWindowActive( pshv );
	if (pshv) pshv->Release();
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;

}

/*
// @pymethod |PyIShellBrowser|SetToolbarItems|Description of SetToolbarItems.
PyObject *PyIShellBrowser::SetToolbarItems(PyObject *self, PyObject *args)
{
	IShellBrowser *pISB = GetI(self);
	if ( pISB == NULL )
		return NULL;
// *** The input argument lpButtons of type "LPTBBUTTONSB" was not processed ***
//     Please check the conversion function is appropriate and exists!
	LPTBBUTTONSB lpButtons;
	PyObject *oblpButtons;
	// @pyparm <o PyLPTBBUTTONSB>|lpButtons||Description for lpButtons
	// @pyparm int|nButtons||Description for nButtons
	// @pyparm int|uFlags||Description for uFlags
	UINT nButtons;
	UINT uFlags;
	if ( !PyArg_ParseTuple(args, "Oii:SetToolbarItems", &oblpButtons, &nButtons, &uFlags) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsLPTBBUTTONSB( oblpButtons, &lpButtons )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISB->SetToolbarItems( lpButtons, nButtons, uFlags );
	PyObject_FreeLPTBBUTTONSB(lpButtons);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pISB, IID_IShellBrowser );
	Py_INCREF(Py_None);
	return Py_None;

}
*/
// @object PyIShellBrowser|Description of the interface
static struct PyMethodDef PyIShellBrowser_methods[] =
{
	{ "InsertMenusSB", PyIShellBrowser::InsertMenusSB, 1 }, // @pymeth InsertMenusSB|Description of InsertMenusSB
	{ "SetMenuSB", PyIShellBrowser::SetMenuSB, 1 }, // @pymeth SetMenuSB|Description of SetMenuSB
	{ "RemoveMenusSB", PyIShellBrowser::RemoveMenusSB, 1 }, // @pymeth RemoveMenusSB|Description of RemoveMenusSB
	{ "SetStatusTextSB", PyIShellBrowser::SetStatusTextSB, 1 }, // @pymeth SetStatusTextSB|Description of SetStatusTextSB
	{ "EnableModelessSB", PyIShellBrowser::EnableModelessSB, 1 }, // @pymeth EnableModelessSB|Description of EnableModelessSB
	{ "TranslateAcceleratorSB", PyIShellBrowser::TranslateAcceleratorSB, 1 }, // @pymeth TranslateAcceleratorSB|Description of TranslateAcceleratorSB
	{ "BrowseObject", PyIShellBrowser::BrowseObject, 1 }, // @pymeth BrowseObject|Description of BrowseObject
	{ "GetViewStateStream", PyIShellBrowser::GetViewStateStream, 1 }, // @pymeth GetViewStateStream|Description of GetViewStateStream
	{ "GetControlWindow", PyIShellBrowser::GetControlWindow, 1 }, // @pymeth GetControlWindow|Description of GetControlWindow
	{ "SendControlMsg", PyIShellBrowser::SendControlMsg, 1 }, // @pymeth SendControlMsg|Description of SendControlMsg
	{ "QueryActiveShellView", PyIShellBrowser::QueryActiveShellView, 1 }, // @pymeth QueryActiveShellView|Description of QueryActiveShellView
	{ "OnViewWindowActive", PyIShellBrowser::OnViewWindowActive, 1 }, // @pymeth OnViewWindowActive|Description of OnViewWindowActive
	{ NULL }
};

PyComTypeObject PyIShellBrowser::type("PyIShellBrowser",
		&PyIOleWindow::type,
		sizeof(PyIShellBrowser),
		PyIShellBrowser_methods,
		GET_PYCOM_CTOR(PyIShellBrowser));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP PyGShellBrowser::GetWindow(HWND __RPC_FAR * phwnd) {return PyGOleWindow::GetWindow(phwnd);}
STDMETHODIMP PyGShellBrowser::ContextSensitiveHelp(BOOL fEnterMode) {return PyGOleWindow::ContextSensitiveHelp(fEnterMode);}
STDMETHODIMP PyGShellBrowser::InsertMenusSB(
		/* [in] */ HMENU hmenuShared,
		/* [out][in] */ LPOLEMENUGROUPWIDTHS lpMenuWidths)
{
	PY_GATEWAY_METHOD;
	PyObject *oblpMenuWidths = PyObject_FromOLEMENUGROUPWIDTHS(lpMenuWidths);
	if (oblpMenuWidths==NULL) return PyCom_HandlePythonFailureToCOM();
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("InsertMenusSB", &result, "iO", hmenuShared, oblpMenuWidths);
	Py_DECREF(oblpMenuWidths);
	if (FAILED(hr)) return hr;
	PyObject_AsOLEMENUGROUPWIDTHS(result, lpMenuWidths);
	Py_DECREF(result);
	return PyCom_SetCOMErrorFromPyException(GetIID());
}

STDMETHODIMP PyGShellBrowser::SetMenuSB(
		/* [in] */ HMENU hmenuShared,
		/* [in] */ HOLEMENU holemenuRes,
		/* [in] */ HWND hwndActiveObject)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("SetMenuSB", NULL, "iil", hmenuShared, holemenuRes, hwndActiveObject);
	return hr;
}

STDMETHODIMP PyGShellBrowser::RemoveMenusSB(
		/* [in] */ HMENU hmenuShared)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("RemoveMenusSB", NULL, "i", hmenuShared);
	return hr;
}

STDMETHODIMP PyGShellBrowser::SetStatusTextSB(
		/* [unique][in] */ LPCOLESTR pszStatusText)
{
	PY_GATEWAY_METHOD;
	PyObject *obpszStatusText;
	obpszStatusText = MakeOLECHARToObj(pszStatusText);
	HRESULT hr=InvokeViaPolicy("SetStatusTextSB", NULL, "O", obpszStatusText);
	Py_XDECREF(obpszStatusText);
	return hr;
}

STDMETHODIMP PyGShellBrowser::EnableModelessSB(
		/* [in] */ BOOL fEnable)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("EnableModelessSB", NULL, "i", fEnable);
	return hr;
}

STDMETHODIMP PyGShellBrowser::TranslateAcceleratorSB(
		/* [in] */ MSG * pmsg,
		/* [in] */ WORD wID)
{
	PY_GATEWAY_METHOD;
	PyObject *obpmsg = PyObject_FromMSG(pmsg);
	if (obpmsg==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("TranslateAcceleratorSB", NULL, "Oi", obpmsg, wID);
	Py_DECREF(obpmsg);
	return hr;
}

STDMETHODIMP PyGShellBrowser::BrowseObject(
		/* [in] */ LPCITEMIDLIST pidl,
		/* [in] */ UINT wFlags)
{
	PY_GATEWAY_METHOD;
	PyObject *obpidl;
	obpidl = PyObject_FromPIDL(pidl, FALSE);
	HRESULT hr=InvokeViaPolicy("BrowseObject", NULL, "Oi", obpidl, wFlags);
	Py_XDECREF(obpidl);
	return hr;
}

STDMETHODIMP PyGShellBrowser::GetViewStateStream(
		/* [in] */ DWORD grfMode,
		/* [out] */ IStream ** ppStrm)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetViewStateStream", &result, "l", grfMode);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppStrm;
	if (!PyArg_Parse(result, "O" , &obppStrm)) return PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obppStrm, IID_IStream, (void **)ppStrm, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellBrowser::GetControlWindow(
		/* [in] */ UINT id,
		/* [out] */ HWND * phwnd)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetControlWindow", &result, "i", id);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	if (PyInt_Check(result) || PyLong_Check(result))
		*phwnd = (HWND)PyInt_AsLong(result);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellBrowser::SendControlMsg(
		/* [in] */ UINT id,
		/* [in] */ UINT uMsg,
		/* [in] */ WPARAM wParam,
		/* [in] */ LPARAM lParam,
		/* [in] */ LRESULT * pret)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("SendControlMsg", &result, "iiil", id, uMsg, wParam, lParam);
	if (PyInt_Check(result) || PyLong_Check(result))
		*pret = PyInt_AsLong(result);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellBrowser::QueryActiveShellView(
		/* [out] */ IShellView ** ppshv)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("QueryActiveShellView", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppshv;
	if (!PyArg_Parse(result, "O" , &obppshv)) return PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obppshv, IID_IShellView, (void **)ppshv, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellBrowser::OnViewWindowActive(
		/* [in] */ IShellView * pshv)
{
	PY_GATEWAY_METHOD;
	PyObject *obpshv;
	obpshv = PyCom_PyObjectFromIUnknown(pshv, IID_IShellView, TRUE);
	HRESULT hr=InvokeViaPolicy("OnViewWindowActive", NULL, "O", obpshv);
	Py_XDECREF(obpshv);
	return hr;
}

STDMETHODIMP PyGShellBrowser::SetToolbarItems(
		/* [in] */ LPTBBUTTONSB lpButtons,
		/* [in] */ UINT nButtons,
		/* [in] */ UINT uFlags)
{
	PY_GATEWAY_METHOD;
// *** The input argument lpButtons of type "LPTBBUTTONSB" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPTBBUTTONSB' (lpButtons) is unknown.
	PyObject *oblpButtons = Py_None; //PyObject_FromLPTBBUTTONSB(lpButtons);
	Py_INCREF(Py_None);
	if (oblpButtons==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetToolbarItems", NULL, "Oii", oblpButtons, nButtons, uFlags);
	Py_DECREF(oblpButtons);
	return hr;
}

