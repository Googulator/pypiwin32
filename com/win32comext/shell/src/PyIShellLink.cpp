// This file implements the IShellLink Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"
#include "PyIShellLink.h"

extern BOOL PyObject_AsPIDL(PyObject *ob, LPCITEMIDLIST *ppidl, BOOL bNoneOK = FALSE);
extern PyObject *PyObject_FromPIDL(LPITEMIDLIST pidl);
void PyObject_FreePIDL( LPCITEMIDLIST pidl );

PyObject *PyObject_FromWIN32_FIND_DATA(WIN32_FIND_DATAA &findData);


// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIShellLink::PyIShellLink(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIShellLink::~PyIShellLink()
{
}

/* static */ IShellLink *PyIShellLink::GetI(PyObject *self)
{
	return (IShellLink *)PyIUnknown::GetI(self);
}

// @pymethod name, WIN32_FIND_DATA|PyIShellLink|GetPath|Retrieves the path and file name of a shell link object.
PyObject *PyIShellLink::GetPath(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	WIN32_FIND_DATAA fd;
	// @pyparm int|fFlags||One of the following values:
	// @flagh Value|Description
	// @flag SLGP_SHORTPATH|Retrieves the standard short (8.3 format) file name.  
	// @flag SLGP_UNCPRIORITY|Retrieves the Universal Naming Convention (UNC) path name of the file.  
	// @flag SLGP_RAWPATH|Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to be expanded. 
	// @pyparm int|cchMaxPath|_MAX_PATH|Description for cchMaxPath
	int cchMaxPath = _MAX_PATH;
	DWORD fFlags;
	if ( !PyArg_ParseTuple(args, "l|i:GetPath", &fFlags, &cchMaxPath) )
		return NULL;
	HRESULT hr;
	char *pszFile = (char *)malloc(cchMaxPath);
	if (pszFile==NULL) {
		PyErr_SetString(PyExc_MemoryError, "allocating string buffer");
		return NULL;
	}
	PY_INTERFACE_PRECALL;
	hr = pISL->GetPath( pszFile, cchMaxPath, &fd, fFlags );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) ) {
		free(pszFile);
		return OleSetOleError(hr);
	}
	PyObject *obFD = PyObject_FromWIN32_FIND_DATA(fd);
	PyObject *ret = Py_BuildValue("sO", pszFile, obFD);
	Py_XDECREF(obFD);
	free(pszFile);
	return ret;
}

// @pymethod |PyIShellLink|GetIDList|Description of GetIDList.
PyObject *PyIShellLink::GetIDList(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":GetIDList") )
		return NULL;
	HRESULT hr;
	LPITEMIDLIST pidl = NULL;
	PY_INTERFACE_PRECALL;
	hr = pISL->GetIDList( &pidl );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	return PyObject_FromPIDL(pidl);
}

// @pymethod |PyIShellLink|SetIDList|Description of SetIDList.
PyObject *PyIShellLink::SetIDList(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	LPCITEMIDLIST pidl;
	PyObject *obpidl;
	if ( !PyArg_ParseTuple(args, "O:SetIDList", &obpidl) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsPIDL( obpidl, &pidl )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetIDList( pidl );
	PY_INTERFACE_POSTCALL;

	PyObject_FreePIDL(pidl);

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIShellLink|GetDescription|Description of GetDescription.
PyObject *PyIShellLink::GetDescription(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm int|cchMaxName|1024|Description for cchMaxName
	int cchMaxName = 1024;
	if ( !PyArg_ParseTuple(args, "|i:GetDescription", &cchMaxName) )
		return NULL;
	HRESULT hr;
	char *pszName = (char *)malloc(cchMaxName * sizeof(char) );
	if (pszName==NULL) {
		PyErr_SetString(PyExc_MemoryError, "allocating string buffer");
		return NULL;
	}
	PY_INTERFACE_PRECALL;
	hr = pISL->GetDescription( pszName, cchMaxName );
	PY_INTERFACE_POSTCALL;

	PyObject *ret;
	if ( FAILED(hr) )
		ret = OleSetOleError(hr);
	else
		ret = PyString_FromString(pszName);
	free(pszName);
	return ret;
}

// @pymethod |PyIShellLink|SetDescription|Description of SetDescription.
PyObject *PyIShellLink::SetDescription(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	char *pszName;
	if ( !PyArg_ParseTuple(args, "s:SetDescription", &pszName) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetDescription( pszName );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIShellLink|GetWorkingDirectory|Description of GetWorkingDirectory.
PyObject *PyIShellLink::GetWorkingDirectory(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm int|cchMaxName|1024|Description for cchMaxName
	int cchMaxName = 1024;
	if ( !PyArg_ParseTuple(args, "|i:GetWorkingDirectory", &cchMaxName) )
		return NULL;
	HRESULT hr;
	char *pszName = (char *)malloc(cchMaxName * sizeof(char) );
	if (pszName==NULL) {
		PyErr_SetString(PyExc_MemoryError, "allocating string buffer");
		return NULL;
	}
	PY_INTERFACE_PRECALL;
	hr = pISL->GetWorkingDirectory( pszName, cchMaxName );
	PY_INTERFACE_POSTCALL;

	PyObject *ret;
	if ( FAILED(hr) )
		ret = OleSetOleError(hr);
	else
		ret = PyString_FromString(pszName);
	free(pszName);
	return ret;
}

// @pymethod |PyIShellLink|SetWorkingDirectory|Description of SetWorkingDirectory.
PyObject *PyIShellLink::SetWorkingDirectory(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	LPCSTR pszDir;
	if ( !PyArg_ParseTuple(args, "s:SetWorkingDirectory", &pszDir) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetWorkingDirectory( pszDir );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellLink|GetArguments|Description of GetArguments.
PyObject *PyIShellLink::GetArguments(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm int|cchMaxName|1024|Description for cchMaxName
	int cchMaxName = 1024;
	if ( !PyArg_ParseTuple(args, "|i:GetArguments", &cchMaxName) )
		return NULL;
	HRESULT hr;
	char *pszName = (char *)malloc(cchMaxName * sizeof(char) );
	if (pszName==NULL) {
		PyErr_SetString(PyExc_MemoryError, "allocating string buffer");
		return NULL;
	}
	PY_INTERFACE_PRECALL;
	hr = pISL->GetArguments( pszName, cchMaxName );
	PY_INTERFACE_POSTCALL;

	PyObject *ret;
	if ( FAILED(hr) )
		ret = OleSetOleError(hr);
	else
		ret = PyString_FromString(pszName);
	free(pszName);
	return ret;
}

// @pymethod |PyIShellLink|SetArguments|Description of SetArguments.
PyObject *PyIShellLink::SetArguments(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	LPCSTR pszArgs;
	if ( !PyArg_ParseTuple(args, "s:SetArguments", &pszArgs) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetArguments( pszArgs );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellLink|GetHotkey|Description of GetHotkey.
PyObject *PyIShellLink::GetHotkey(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	HRESULT hr;
	WORD hotkey;
	PY_INTERFACE_PRECALL;
	hr = pISL->GetHotkey( &hotkey );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	return PyInt_FromLong(hotkey);
}

// @pymethod |PyIShellLink|SetHotkey|Description of SetHotkey.
PyObject *PyIShellLink::SetHotkey(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm int|wHotkey||Description for wHotkey
	WORD wHotkey;
	if ( !PyArg_ParseTuple(args, "i:SetHotkey", &wHotkey) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetHotkey( wHotkey );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellLink|GetShowCmd|Description of GetShowCmd.
PyObject *PyIShellLink::GetShowCmd(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	HRESULT hr;
	int iShowCmd;
	PY_INTERFACE_PRECALL;
	hr = pISL->GetShowCmd( &iShowCmd );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	return PyInt_FromLong(iShowCmd);
}

// @pymethod |PyIShellLink|SetShowCmd|Description of SetShowCmd.
PyObject *PyIShellLink::SetShowCmd(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm int|iShowCmd||Description for iShowCmd
	int iShowCmd;
	if ( !PyArg_ParseTuple(args, "i:SetShowCmd", &iShowCmd) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetShowCmd( iShowCmd );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellLink|GetIconLocation|Description of GetIconLocation.
PyObject *PyIShellLink::GetIconLocation(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm int|cchMaxPath|_MAX_PATH|Description for cchMaxName
	int cchIconPath = _MAX_PATH;
	if ( !PyArg_ParseTuple(args, "|i:GetIconLocation", &cchIconPath) )
		return NULL;
	char *pszIconPath = (char *)malloc(cchIconPath * sizeof(char) );
	if (pszIconPath==NULL) {
		PyErr_SetString(PyExc_MemoryError, "allocating string buffer");
		return NULL;
	}
	HRESULT hr;
	int iIcon;
	PY_INTERFACE_PRECALL;
	hr = pISL->GetIconLocation( pszIconPath, cchIconPath, &iIcon );
	PY_INTERFACE_POSTCALL;

	PyObject *ret;
	if ( FAILED(hr) )
		ret = OleSetOleError(hr);
	else
		ret = Py_BuildValue("si", pszIconPath, iIcon);
	free(pszIconPath);
	return ret;
}

// @pymethod |PyIShellLink|SetIconLocation|Description of SetIconLocation.
PyObject *PyIShellLink::SetIconLocation(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	LPCSTR pszIconPath;
	// @pyparm string|iconPath||Description for iconPath
	// @pyparm int|iIcon||Description for iIcon
	int iIcon;
	if ( !PyArg_ParseTuple(args, "si:SetIconLocation", &pszIconPath, &iIcon) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetIconLocation( pszIconPath, iIcon );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellLink|SetRelativePath|Description of SetRelativePath.
PyObject *PyIShellLink::SetRelativePath(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	LPCSTR pszPathRel;
	// @pyparm string|relPath||Description for relPath
	// @pyparm int|reserved|0|Description for reserved
	DWORD dwReserved = 0;
	if ( !PyArg_ParseTuple(args, "s|l:SetRelativePath", &pszPathRel, &dwReserved) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetRelativePath( pszPathRel, dwReserved );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIShellLink|Resolve|Description of Resolve.
PyObject *PyIShellLink::Resolve(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	// @pyparm HWND|hwnd||Description for hwnd
	// @pyparm int|fFlags||Description for fFlags
	HWND hwnd;
	DWORD fFlags;
	if ( !PyArg_ParseTuple(args, "ll:Resolve", &hwnd, &fFlags) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->Resolve( hwnd, fFlags );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIShellLink|SetPath|Description of SetPath.
PyObject *PyIShellLink::SetPath(PyObject *self, PyObject *args)
{
	IShellLink *pISL = GetI(self);
	if ( pISL == NULL )
		return NULL;
	LPCSTR pszFile;
	if ( !PyArg_ParseTuple(args, "s:SetPath", &pszFile) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pISL->SetPath( pszFile );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return OleSetOleError(hr);
	Py_INCREF(Py_None);
	return Py_None;
}

// @object PyIShellLink|Description of the interface
static struct PyMethodDef PyIShellLink_methods[] =
{
	{ "GetPath", PyIShellLink::GetPath, 1 }, // @pymeth GetPath|Retrieves the path and file name of a shell link object.
	{ "GetIDList", PyIShellLink::GetIDList, 1 }, // @pymeth GetIDList|Description of GetIDList
	{ "SetIDList", PyIShellLink::SetIDList, 1 }, // @pymeth SetIDList|Description of SetIDList
	{ "GetDescription", PyIShellLink::GetDescription, 1 }, // @pymeth GetDescription|Description of GetDescription
	{ "SetDescription", PyIShellLink::SetDescription, 1 }, // @pymeth SetDescription|Description of SetDescription
	{ "GetWorkingDirectory", PyIShellLink::GetWorkingDirectory, 1 }, // @pymeth GetWorkingDirectory|Description of GetWorkingDirectory
	{ "SetWorkingDirectory", PyIShellLink::SetWorkingDirectory, 1 }, // @pymeth SetWorkingDirectory|Description of SetWorkingDirectory
	{ "GetArguments", PyIShellLink::GetArguments, 1 }, // @pymeth GetArguments|Description of GetArguments
	{ "SetArguments", PyIShellLink::SetArguments, 1 }, // @pymeth SetArguments|Description of SetArguments
	{ "GetHotkey", PyIShellLink::GetHotkey, 1 }, // @pymeth GetHotkey|Description of GetHotkey
	{ "SetHotkey", PyIShellLink::SetHotkey, 1 }, // @pymeth SetHotkey|Description of SetHotkey
	{ "GetShowCmd", PyIShellLink::GetShowCmd, 1 }, // @pymeth GetShowCmd|Description of GetShowCmd
	{ "SetShowCmd", PyIShellLink::SetShowCmd, 1 }, // @pymeth SetShowCmd|Description of SetShowCmd
	{ "GetIconLocation", PyIShellLink::GetIconLocation, 1 }, // @pymeth GetIconLocation|Description of GetIconLocation
	{ "SetIconLocation", PyIShellLink::SetIconLocation, 1 }, // @pymeth SetIconLocation|Description of SetIconLocation
	{ "SetRelativePath", PyIShellLink::SetRelativePath, 1 }, // @pymeth SetRelativePath|Description of SetRelativePath
	{ "Resolve", PyIShellLink::Resolve, 1 }, // @pymeth Resolve|Description of Resolve
	{ "SetPath", PyIShellLink::SetPath, 1 }, // @pymeth SetPath|Description of SetPath
	{ NULL }
};

PyComTypeObject PyIShellLink::type("PyIShellLink",
		&PyIUnknown::type,
		sizeof(PyIShellLink),
		PyIShellLink_methods,
		GET_PYCOM_CTOR(PyIShellLink));
// ---------------------------------------------------
//
// Gateway Implementation
// Python never needs to implement this!!!
/**********************************
STDMETHODIMP PyGShellLink::GetPath(
		 LPSTR pszFile,
		int cchMaxPath,
		WIN32_FIND_DATAA * pfd,
		DWORD fFlags)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszFile of type "LPSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPSTR' (pszFile) is unknown.
	PyObject *obpszFile = PyObject_FromLPSTR(pszFile);
	if (obpszFile==NULL) return PyCom_HandlePythonFailureToCOM();
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetPath", &result, "Oil", obpszFile, cchMaxPath, fFlags);
	Py_DECREF(obpszFile);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument pfd of type "WIN32_FIND_DATAA *" was not processed ***
//     The type 'WIN32_FIND_DATAA *' (pfd) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::GetIDList(
		LPITEMIDLIST * ppidl)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetIDList", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument ppidl of type "LPITEMIDLIST *" was not processed ***
//     The type 'LPITEMIDLIST *' (ppidl) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::SetIDList(
		LPCITEMIDLIST pidl)
{
	PY_GATEWAY_METHOD;
// *** The input argument pidl of type "LPCITEMIDLIST" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCITEMIDLIST' (pidl) is unknown.
	PyObject *obpidl = PyObject_FromLPCITEMIDLIST(pidl);
	if (obpidl==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetIDList", NULL, "O", obpidl);
	Py_DECREF(obpidl);
	return hr;
}

STDMETHODIMP PyGShellLink::GetDescription(
		LPSTR pszName,
		int cchMaxName)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszName of type "LPSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPSTR' (pszName) is unknown.
	PyObject *obpszName = PyObject_FromLPSTR(pszName);
	if (obpszName==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("GetDescription", NULL, "Oi", obpszName, cchMaxName);
	Py_DECREF(obpszName);
	return hr;
}

STDMETHODIMP PyGShellLink::SetDescription(
		LPCSTR pszName)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszName of type "LPCSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCSTR' (pszName) is unknown.
	PyObject *obpszName = PyObject_FromLPCSTR(pszName);
	if (obpszName==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetDescription", NULL, "O", obpszName);
	Py_DECREF(obpszName);
	return hr;
}

STDMETHODIMP PyGShellLink::GetWorkingDirectory(
		LPSTR pszDir,
		int cchMaxPath)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetWorkingDirectory", &result, "i", cchMaxPath);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument pszDir of type "LPSTR" was not processed ***
//     The type 'LPSTR' (pszDir) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::SetWorkingDirectory(
		LPCSTR pszDir)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszDir of type "LPCSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCSTR' (pszDir) is unknown.
	PyObject *obpszDir = PyObject_FromLPCSTR(pszDir);
	if (obpszDir==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetWorkingDirectory", NULL, "O", obpszDir);
	Py_DECREF(obpszDir);
	return hr;
}

STDMETHODIMP PyGShellLink::GetArguments(
		LPSTR pszArgs,
		int cchMaxPath)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetArguments", &result, "i", cchMaxPath);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument pszArgs of type "LPSTR" was not processed ***
//     The type 'LPSTR' (pszArgs) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::SetArguments(
		LPCSTR pszArgs)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszArgs of type "LPCSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCSTR' (pszArgs) is unknown.
	PyObject *obpszArgs = PyObject_FromLPCSTR(pszArgs);
	if (obpszArgs==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetArguments", NULL, "O", obpszArgs);
	Py_DECREF(obpszArgs);
	return hr;
}

STDMETHODIMP PyGShellLink::GetHotkey(
		WORD * pwHotkey)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetHotkey", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument pwHotkey of type "WORD *" was not processed ***
//     The type 'WORD *' (pwHotkey) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::SetHotkey(
		WORD wHotkey)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("SetHotkey", NULL, "i", wHotkey);
	return hr;
}

STDMETHODIMP PyGShellLink::GetShowCmd(
		int * piShowCmd)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetShowCmd", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument piShowCmd of type "int *" was not processed ***
//     The type 'int *' (piShowCmd) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::SetShowCmd(
		int iShowCmd)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("SetShowCmd", NULL, "i", iShowCmd);
	return hr;
}

STDMETHODIMP PyGShellLink::GetIconLocation(
		LPSTR pszIconPath,
		int cchIconPath,
		int * piIcon)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetIconLocation", &result, "i", cchIconPath);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument pszIconPath of type "LPSTR" was not processed ***
//     The type 'LPSTR' (pszIconPath) is unknown.
// *** The output argument piIcon of type "int *" was not processed ***
//     The type 'int *' (piIcon) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGShellLink::SetIconLocation(
		LPCSTR pszIconPath,
		int iIcon)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszIconPath of type "LPCSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCSTR' (pszIconPath) is unknown.
	PyObject *obpszIconPath = PyObject_FromLPCSTR(pszIconPath);
	if (obpszIconPath==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetIconLocation", NULL, "Oi", obpszIconPath, iIcon);
	Py_DECREF(obpszIconPath);
	return hr;
}

STDMETHODIMP PyGShellLink::SetRelativePath(
		LPCSTR pszPathRel,
		DWORD dwReserved)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszPathRel of type "LPCSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCSTR' (pszPathRel) is unknown.
	PyObject *obpszPathRel = PyObject_FromLPCSTR(pszPathRel);
	if (obpszPathRel==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetRelativePath", NULL, "Ol", obpszPathRel, dwReserved);
	Py_DECREF(obpszPathRel);
	return hr;
}

STDMETHODIMP PyGShellLink::Resolve(
		HWND hwnd,
		DWORD fFlags)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("Resolve", NULL, "ll", hwnd, fFlags);
	return hr;
}

STDMETHODIMP PyGShellLink::SetPath(
		LPCSTR pszFile)
{
	PY_GATEWAY_METHOD;
// *** The input argument pszFile of type "LPCSTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'LPCSTR' (pszFile) is unknown.
	PyObject *obpszFile = PyObject_FromLPCSTR(pszFile);
	if (obpszFile==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetPath", NULL, "O", obpszFile);
	Py_DECREF(obpszFile);
	return hr;
}

******************************/
