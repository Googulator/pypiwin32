// This file implements the IExtractIcon Interface and Gateway for Python.
// Generated by makegw.py
#include "shell_pch.h"
#include "PyIExtractIcon.h"
// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIExtractIcon::PyIExtractIcon(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIExtractIcon::~PyIExtractIcon()
{
}

/* static */ IExtractIcon *PyIExtractIcon::GetI(PyObject *self)
{
	return (IExtractIcon *)PyIUnknown::GetI(self);
}

// @pymethod |PyIExtractIcon|Extract|Description of Extract.
PyObject *PyIExtractIcon::Extract(PyObject *self, PyObject *args)
{
	IExtractIcon *pIEI = GetI(self);
	if ( pIEI == NULL )
		return NULL;
	// @pyparm <o unicode>|pszFile||Description for pszFile
	// @pyparm int|nIconIndex||Description for nIconIndex
	// @pyparm int|nIconSize||Description for nIconIndex
	HICON hiconLarge;
	HICON hiconSmall;
	PyObject *obpszFile;
	TCHAR *pszFile;
	UINT nIconIndex;
	UINT nIconSize;
	if ( !PyArg_ParseTuple(args, "Oii:Extract", &obpszFile, &nIconIndex, &nIconSize) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (!PyWinObject_AsTCHAR(obpszFile, &pszFile)) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIEI->Extract( pszFile, nIconIndex, &hiconLarge, &hiconSmall, nIconSize );
	PyWinObject_FreeTCHAR(pszFile);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIEI, IID_IExtractIcon );
	return Py_BuildValue("ii", hiconLarge, hiconSmall);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIExtractIcon|GetIconLocation|Description of GetIconLocation.
PyObject *PyIExtractIcon::GetIconLocation(PyObject *self, PyObject *args)
{
	IExtractIcon *pIEI = GetI(self);
	if ( pIEI == NULL )
		return NULL;
	// @pyparm int|uFlags||Description for uFlags
	// @pyparm int|cchMax|MAX_PATH+MAX_FNAME|Buffer size to allocate for file name
	UINT uFlags;
	INT cchMax = MAX_PATH + _MAX_FNAME;
	if ( !PyArg_ParseTuple(args, "i|i:GetIconLocation", &uFlags, &cchMax))
		return NULL;
	TCHAR *buf = (TCHAR *)malloc(cchMax * sizeof(TCHAR));
	if (!buf)
		return PyErr_NoMemory();
	INT iIndex;
	UINT flags;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIEI->GetIconLocation( uFlags, buf, cchMax, &iIndex, &flags);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) ) {
		free(buf);
		return PyCom_BuildPyException(hr, pIEI, IID_IExtractIcon );
	}
	PyObject *retStr = PyWinObject_FromTCHAR(buf);
	free(buf);
	return Py_BuildValue("Nii", retStr, iIndex, flags);
}

// @object PyIExtractIcon|Description of the interface
static struct PyMethodDef PyIExtractIcon_methods[] =
{
	{ "Extract", PyIExtractIcon::Extract, 1 }, // @pymeth Extract|Description of Extract
	{ "GetIconLocation", PyIExtractIcon::GetIconLocation, 1 }, // @pymeth GetIconLocation|Description of GetIconLocation
	{ NULL }
};

PyComTypeObject PyIExtractIcon::type("PyIExtractIcon",
		&PyIUnknown::type,
		sizeof(PyIExtractIcon),
		PyIExtractIcon_methods,
		GET_PYCOM_CTOR(PyIExtractIcon));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP PyGExtractIcon::Extract(
		/* [unique][in] */ LPCTSTR pszFile,
		/* [unique][in] */ UINT nIconIndex,
		/* [out] */ HICON * phiconLarge,
		/* [out] */ HICON * phiconSmall,
		/* [unique][in] */ UINT nIconSize)
{
	PY_GATEWAY_METHOD;
	PyObject *obpszFile;
	obpszFile = PyWinObject_FromTCHAR((LPTSTR)pszFile);
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("Extract", &result, "Oii", obpszFile, nIconIndex, nIconSize);
	Py_XDECREF(obpszFile);
	if (FAILED(hr)) return hr;
	if (PyInt_Check(result) || PyLong_Check(result))
		hr = PyInt_AsLong(result);
	else {
		PyArg_ParseTuple(result, "ii", phiconLarge, phiconSmall);
		hr = PyCom_HandlePythonFailureToCOM();
	}
	Py_DECREF(result);
	printf("hresult is %x\n", hr);
	return hr;
}

STDMETHODIMP PyGExtractIcon::GetIconLocation(
		/* [unique][in] */ UINT uFlags,
		/* [unique][out] */ LPTSTR szIconFile,
		/* [unique][in] */ UINT cchMax,
		/* [unique][out] */ LPINT piIndex,
		/* [unique][out] */ UINT *pflags)
{
	PY_GATEWAY_METHOD;
	if (cchMax && szIconFile)
		szIconFile[0] = 0;
	*piIndex = 0;
	*pflags = 0;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetIconLocation", &result, "i", uFlags);
	if (FAILED(hr)) return hr;
	PyObject *obFileName;
	// Process the Python results, and convert back to the real params
	if (PyInt_Check(result) || PyLong_Check(result))
		hr = PyInt_AsLong(result);
	else {
		if (PyArg_ParseTuple(result, "Oii", &obFileName, piIndex, pflags)) {
			TCHAR *filename;
			if (PyWinObject_AsTCHAR(obFileName, &filename)) {
#ifdef UNICODE
				// WTF - _tcsncpy resolving to strncpy?!
				wcsncpy(szIconFile, filename, cchMax);
#else
				_tcsncpy(szIconFile, filename, cchMax);
#endif
				PyWinObject_FreeTCHAR(filename);
			}
		}
		hr = PyCom_HandlePythonFailureToCOM();
	}
	Py_DECREF(result);
	return hr;
}

