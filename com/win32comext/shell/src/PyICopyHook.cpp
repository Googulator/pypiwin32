// This file implements the ICopyHook Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"
#include "PyICopyHook.h"

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyICopyHook::PyICopyHook(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyICopyHook::~PyICopyHook()
{
}

/* static */ ICopyHook *PyICopyHook::GetI(PyObject *self)
{
	return (ICopyHook *)PyIUnknown::GetI(self);
}

// @pymethod |PyICopyHook|CopyCallback|Description of CopyCallback.
PyObject *PyICopyHook::CopyCallback(PyObject *self, PyObject *args)
{
	ICopyHook *pICH = GetI(self);
	if ( pICH == NULL )
		return NULL;
	// @pyparm HWND|hwnd||Description for hwnd
	// @pyparm int|wFunc||Description for wFunc
	// @pyparm int|wFlags||Description for wFlags
	// @pyparm string/<o unicode>|srcFile||Description for srcFile
	// @pyparm int|srcAttribs||Description for srcAttribs
	// @pyparm string/<o unicode>|destFile||Description for destFile
	// @pyparm int|destAttribs||Description for destAttribs
	PyObject *obsrcFile;
	PyObject *obdestFile;
	HWND hwnd;
	PyObject *obhwnd;
	UINT wFunc;
	UINT wFlags;
	LPTSTR srcFile;
	DWORD srcAttribs;
	LPTSTR destFile;
	DWORD destAttribs;
	if ( !PyArg_ParseTuple(args, "OiiOlOl:CopyCallback", &obhwnd, &wFunc, &wFlags, &obsrcFile, &srcAttribs, &obdestFile, &destAttribs) )
		return NULL;
	if (!PyWinObject_AsHANDLE(obhwnd, (HANDLE *)&hwnd, FALSE))
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinObject_AsTCHAR(obsrcFile, &srcFile)) bPythonIsHappy = FALSE;
	if (bPythonIsHappy && !PyWinObject_AsTCHAR(obdestFile, &destFile)) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pICH->CopyCallback( hwnd, wFunc, wFlags, srcFile, srcAttribs, destFile, destAttribs );
	PyWinObject_FreeTCHAR(srcFile);
	PyWinObject_FreeTCHAR(destFile);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pICH, IID_IShellCopyHook );
	Py_INCREF(Py_None);
	return Py_None;

}

// @object PyICopyHook|Description of the interface
static struct PyMethodDef PyICopyHook_methods[] =
{
	{ "CopyCallback", PyICopyHook::CopyCallback, 1 }, // @pymeth CopyCallback|Description of CopyCallback
	{ NULL }
};

PyComTypeObject PyICopyHook::type("PyICopyHook",
		&PyIUnknown::type,
		sizeof(PyICopyHook),
		PyICopyHook_methods,
		GET_PYCOM_CTOR(PyICopyHook));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP_(UINT) PyGCopyHook::CopyCallback(
		/* [unique][in] */ HWND hwnd,
		/* [unique][in] */ UINT wFunc,
		/* [unique][in] */ UINT wFlags,
		/* [unique][in] */ LPCTSTR srcFile,
		/* [unique][in] */ DWORD srcAttribs,
		/* [unique][in] */ LPCTSTR destFile,
		/* [unique][in] */ DWORD destAttribs)
{
	PY_GATEWAY_METHOD;
	PyObject *obsrcFile;
	PyObject *obdestFile;
	obsrcFile = PyWinObject_FromTCHAR((LPTSTR)srcFile);
	// Dest file can be NULL for FO_DELETE
	if (destFile!=NULL)
		obdestFile = PyWinObject_FromTCHAR((LPTSTR)destFile);
	else{
		obdestFile=Py_None;
		Py_INCREF(Py_None);
		}
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("CopyCallback", &result, "NiiOlOl", PyWinLong_FromHANDLE(hwnd), wFunc, wFlags, obsrcFile, srcAttribs, obdestFile, destAttribs);
	Py_XDECREF(obsrcFile);
	Py_XDECREF(obdestFile);
	if (FAILED(hr)) return hr;
	hr = PyInt_AsLong(result);
	if ((hr==-1) && PyErr_Occurred())
		hr = MAKE_PYCOM_GATEWAY_FAILURE_CODE("CopyCallBack");
	Py_DECREF(result);
	return hr;
}

