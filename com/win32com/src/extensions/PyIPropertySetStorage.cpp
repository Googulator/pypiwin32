// This file implements the IPropertySetStorage Interface and Gateway for Python.
// Generated by makegw.py

#include "stdafx.h"
#include "PythonCOM.h"

#ifndef NO_PYCOM_IPROPERTYSETSTORAGE
#include "PyIPropertySetStorage.h"

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIPropertySetStorage::PyIPropertySetStorage(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIPropertySetStorage::~PyIPropertySetStorage()
{
}

/* static */ IPropertySetStorage *PyIPropertySetStorage::GetI(PyObject *self)
{
	return (IPropertySetStorage *)PyIUnknown::GetI(self);
}

// @pymethod |PyIPropertySetStorage|Create|Description of Create.
PyObject *PyIPropertySetStorage::Create(PyObject *self, PyObject *args)
{
	IPropertySetStorage *pIPSS = GetI(self);
	if ( pIPSS == NULL )
		return NULL;
	FMTID rfmtid;
	PyObject *obrfmtid;
	CLSID pclsid;
	PyObject *obpclsid;
	// @pyparm <o PyIID>|fmtid||Description for fmtid
	// @pyparm <o PyIID>|clsid>||Description for clsid
	// @pyparm int|grfFlags||Description for grfFlags
	// @pyparm int|grfMode||Description for grfMode
	DWORD grfFlags;
	DWORD grfMode;
	IPropertyStorage * ppprstg;
	if ( !PyArg_ParseTuple(args, "OOll:Create", &obrfmtid, &obpclsid, &grfFlags, &grfMode) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinObject_AsIID( obrfmtid, &rfmtid )) bPythonIsHappy = FALSE;
	if (bPythonIsHappy && !PyWinObject_AsIID( obpclsid, &pclsid )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPSS->Create( rfmtid, &pclsid, grfFlags, grfMode, &ppprstg );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPSS, IID_IPropertySetStorage);

	return PyCom_PyObjectFromIUnknown(ppprstg, IID_IPropertyStorage, FALSE);
}

// @pymethod |PyIPropertySetStorage|Open|Description of Open.
PyObject *PyIPropertySetStorage::Open(PyObject *self, PyObject *args)
{
	IPropertySetStorage *pIPSS = GetI(self);
	if ( pIPSS == NULL )
		return NULL;
	FMTID rfmtid;
	PyObject *obrfmtid;
	// @pyparm <o PyIID>|fmtid||Description for fmtid
	// @pyparm int|grfMode|STGM_READ \| STGM_SHARE_EXCLUSIVE|Description for grfMode
	DWORD grfMode=STGM_READ | STGM_SHARE_EXCLUSIVE;
	IPropertyStorage * ppprstg;
	if ( !PyArg_ParseTuple(args, "O|l:Open", &obrfmtid, &grfMode) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinObject_AsIID( obrfmtid, &rfmtid )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPSS->Open( rfmtid, grfMode, &ppprstg );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPSS, IID_IPropertySetStorage);

	return PyCom_PyObjectFromIUnknown(ppprstg, IID_IPropertyStorage, FALSE);
}

// @pymethod |PyIPropertySetStorage|Delete|Description of Delete.
PyObject *PyIPropertySetStorage::Delete(PyObject *self, PyObject *args)
{
	IPropertySetStorage *pIPSS = GetI(self);
	if ( pIPSS == NULL )
		return NULL;
	FMTID rfmtid;
	PyObject *obrfmtid;
	// @pyparm <o PyIID>|fmtid||Description for fmtid
	if ( !PyArg_ParseTuple(args, "O:Delete", &obrfmtid) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinObject_AsIID( obrfmtid, &rfmtid )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPSS->Delete( rfmtid );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPSS, IID_IPropertySetStorage);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPropertySetStorage|Enum|Description of Enum.
PyObject *PyIPropertySetStorage::Enum(PyObject *self, PyObject *args)
{
	IPropertySetStorage *pIPSS = GetI(self);
	if ( pIPSS == NULL )
		return NULL;
	IEnumSTATPROPSETSTG * ppenum;
	if ( !PyArg_ParseTuple(args, ":Enum") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPSS->Enum( &ppenum );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPSS, IID_IPropertySetStorage);

	return PyCom_PyObjectFromIUnknown(ppenum, IID_IEnumSTATPROPSETSTG, FALSE);
}

// @object PyIPropertySetStorage|Description of the interface
static struct PyMethodDef PyIPropertySetStorage_methods[] =
{
	{ "Create", PyIPropertySetStorage::Create, 1 }, // @pymeth Create|Description of Create
	{ "Open", PyIPropertySetStorage::Open, 1 }, // @pymeth Open|Description of Open
	{ "Delete", PyIPropertySetStorage::Delete, 1 }, // @pymeth Delete|Description of Delete
	{ "Enum", PyIPropertySetStorage::Enum, 1 }, // @pymeth Enum|Description of Enum
	{ NULL }
};

PyComEnumProviderTypeObject PyIPropertySetStorage::type("PyIPropertySetStorage",
		&PyIUnknown::type,
		sizeof(PyIPropertySetStorage),
		PyIPropertySetStorage_methods,
		GET_PYCOM_CTOR(PyIPropertySetStorage),
		"Enum");
#endif // NO_PYCOM_IPROPERTYSETSTORAGE
