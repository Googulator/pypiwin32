// This file implements the IDataObject Interface and Gateway for Python.
// Generated by makegw.py

#include "stdafx.h"
#include "PythonCOM.h"
#include "PythonCOMServer.h"
#include "PyIDataObject.h"
#include "PyComTypeObjects.h"

BOOL PyObject_AsFORMATETC(PyObject *ob, FORMATETC *petc)
{
	PyObject *obtd;
	if (!PyArg_ParseTuple(ob, "iOiii", 
			&petc->cfFormat,
			&obtd,
			&petc->dwAspect,
			&petc->lindex,
			&petc->tymed))
			return FALSE;
	if (obtd!=Py_None) {
		PyErr_SetString(PyExc_ValueError, "td must be None");
		return FALSE;
	}
	petc->ptd = NULL;
	return TRUE;
}

PyObject *PyObject_FromFORMATETC(FORMATETC *petc)
{
	return Py_BuildValue("iziii",
			petc->cfFormat,
			NULL,
			petc->dwAspect,
			petc->lindex,
			petc->tymed);
}

BOOL PyObject_AsPySTGMEDIUM(PyObject *obmedium, PySTGMEDIUM **pp)
{
	if (!PySTGMEDIUM_Check(obmedium)) {
		PyErr_Format(PyExc_TypeError, "Object must be a PySTGMEDIUM (not a '%s')", obmedium->ob_type->tp_name);
		return FALSE;
	}
	*pp = (PySTGMEDIUM *)obmedium;
	return TRUE;
}

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIDataObject::PyIDataObject(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIDataObject::~PyIDataObject()
{
}

/* static */ IDataObject *PyIDataObject::GetI(PyObject *self)
{
	return (IDataObject *)PyIUnknown::GetI(self);
}

// @pymethod |PyIDataObject|GetData|Description of GetData.
PyObject *PyIDataObject::GetData(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	FORMATETC formatetcIn;
	PyObject *obpformatetcIn;
	// @pyparm <o PyFORMATETC>|pformatetcIn||Description for pformatetcIn
	if ( !PyArg_ParseTuple(args, "O:GetData", &obpformatetcIn) )
		return NULL;

	PySTGMEDIUM *pymedium = PyObject_FromSTGMEDIUM();
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsFORMATETC( obpformatetcIn, &formatetcIn )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->GetData( &formatetcIn, &pymedium->medium);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) ) {
		Py_DECREF(pymedium);
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	}
	return pymedium;
}

// @pymethod |PyIDataObject|GetDataHere|Description of GetDataHere.
PyObject *PyIDataObject::GetDataHere(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	FORMATETC formatetc;
	PyObject *obpformatetc;
	// @pyparm <o PyFORMATETC>|pformatetcIn||Description for pformatetcIn
	if ( !PyArg_ParseTuple(args, "O:GetDataHere", &obpformatetc) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsFORMATETC( obpformatetc, &formatetc )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	PySTGMEDIUM *pymedium = PyObject_FromSTGMEDIUM();
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->GetDataHere( &formatetc, &pymedium->medium);
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) ) {
		Py_DECREF(pymedium);
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	}
	return pymedium;
}

// @pymethod |PyIDataObject|QueryGetData|Description of QueryGetData.
PyObject *PyIDataObject::QueryGetData(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	FORMATETC formatetc;
	PyObject *obpformatetc;
	// @pyparm <o PyFORMATETC>|pformatetc||Description for pformatetc
	if ( !PyArg_ParseTuple(args, "O:QueryGetData", &obpformatetc) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsFORMATETC( obpformatetc, &formatetc )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->QueryGetData( &formatetc );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIDataObject|GetCanonicalFormatEtc|Description of GetCanonicalFormatEtc.
PyObject *PyIDataObject::GetCanonicalFormatEtc(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	FORMATETC formatectIn;
	PyObject *obpformatectIn;
	// @pyparm <o PyFORMATETC *>|pformatectIn||Description for pformatectIn
	if ( !PyArg_ParseTuple(args, "O:GetCanonicalFormatEtc", &obpformatectIn) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsFORMATETC( obpformatectIn, &formatectIn )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	FORMATETC formatetcOut;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->GetCanonicalFormatEtc( &formatectIn, &formatetcOut );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	return PyObject_FromFORMATETC(&formatetcOut);
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIDataObject|SetData|Description of SetData.
PyObject *PyIDataObject::SetData(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	FORMATETC formatetc;
	PyObject *obpformatetc;
	// @pyparm <o PyFORMATETC>|pformatetc||Description for pformatetc
	PyObject *obmedium;
	PySTGMEDIUM *pymedium;
	// @pyparm <o PySTGMEDIUM *>|pmedium||Description for pmedium
	// @pyparm int|fRelease||Description for fRelease
	BOOL fRelease;
	if ( !PyArg_ParseTuple(args, "OOi:SetData", &obpformatetc, &obmedium, &fRelease) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsFORMATETC( obpformatetc, &formatetc )) bPythonIsHappy = FALSE;
	if (bPythonIsHappy && !PyObject_AsPySTGMEDIUM( obmedium, &pymedium )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->SetData( &formatetc, &pymedium->medium, fRelease );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	if (fRelease)
		pymedium->DropOwnership();
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIDataObject|EnumFormatEtc|Description of EnumFormatEtc.
PyObject *PyIDataObject::EnumFormatEtc(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	// @pyparm int|dwDirection|DATADIR_GET|Description for dwDirection
	DWORD dwDirection = DATADIR_GET;
	IEnumFORMATETC * ppenumFormatEtc;
	if ( !PyArg_ParseTuple(args, "|l:EnumFormatEtc", &dwDirection) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->EnumFormatEtc( dwDirection, &ppenumFormatEtc );
	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	return PyCom_PyObjectFromIUnknown(ppenumFormatEtc, IID_IEnumFORMATETC, FALSE);
}

// @pymethod |PyIDataObject|DAdvise|Description of DAdvise.
PyObject *PyIDataObject::DAdvise(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	FORMATETC formatetc;
	PyObject *obpformatetc;
	// @pyparm <o PyFORMATETC>|pformatetc||Description for pformatetc
	// @pyparm int|advf||Description for advf
	// @pyparm <o PyIAdviseSink *>|pAdvSink||Description for pAdvSink
	PyObject *obpAdvSink;
	DWORD advf;
	IAdviseSink *pAdvSink;
	if ( !PyArg_ParseTuple(args, "OlO:DAdvise", &obpformatetc, &advf, &obpAdvSink) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsFORMATETC( obpformatetc, &formatetc )) bPythonIsHappy = FALSE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obpAdvSink, IID_IAdviseSink, (void **)&pAdvSink, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	DWORD dwConnection;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->DAdvise( &formatetc, advf, pAdvSink, &dwConnection );
	PY_INTERFACE_POSTCALL;
	if (pAdvSink) pAdvSink->Release();
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	return PyInt_FromLong(dwConnection);
}

// @pymethod |PyIDataObject|DUnadvise|Description of DUnadvise.
PyObject *PyIDataObject::DUnadvise(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	// @pyparm int|dwConnection||Description for dwConnection
	DWORD dwConnection;
	if ( !PyArg_ParseTuple(args, "l:DUnadvise", &dwConnection) )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->DUnadvise( dwConnection );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	Py_INCREF(Py_None);
	return Py_None;
}

// @pymethod |PyIDataObject|EnumDAdvise|Description of EnumDAdvise.
PyObject *PyIDataObject::EnumDAdvise(PyObject *self, PyObject *args)
{
	IDataObject *pIDO = GetI(self);
	if ( pIDO == NULL )
		return NULL;
	IEnumSTATDATA *ppenumAdvise;
	if ( !PyArg_ParseTuple(args, ":EnumDAdvise") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIDO->EnumDAdvise( &ppenumAdvise );
	PY_INTERFACE_POSTCALL;
	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIDO, IID_IDataObject );
	return PyCom_PyObjectFromIUnknown(ppenumAdvise, IID_IEnumSTATDATA, FALSE);
}

// @object PyIDataObject|Description of the interface
static struct PyMethodDef PyIDataObject_methods[] =
{
	{ "GetData", PyIDataObject::GetData, 1 }, // @pymeth GetData|Description of GetData
	{ "GetDataHere", PyIDataObject::GetDataHere, 1 }, // @pymeth GetDataHere|Description of GetDataHere
	{ "QueryGetData", PyIDataObject::QueryGetData, 1 }, // @pymeth QueryGetData|Description of QueryGetData
	{ "GetCanonicalFormatEtc", PyIDataObject::GetCanonicalFormatEtc, 1 }, // @pymeth GetCanonicalFormatEtc|Description of GetCanonicalFormatEtc
	{ "SetData", PyIDataObject::SetData, 1 }, // @pymeth SetData|Description of SetData
	{ "EnumFormatEtc", PyIDataObject::EnumFormatEtc, 1 }, // @pymeth EnumFormatEtc|Description of EnumFormatEtc
	{ "DAdvise", PyIDataObject::DAdvise, 1 }, // @pymeth DAdvise|Description of DAdvise
	{ "DUnadvise", PyIDataObject::DUnadvise, 1 }, // @pymeth DUnadvise|Description of DUnadvise
	{ "EnumDAdvise", PyIDataObject::EnumDAdvise, 1 }, // @pymeth EnumDAdvise|Description of EnumDAdvise
	{ NULL }
};

PyComTypeObject PyIDataObject::type("PyIDataObject",
		&PyIUnknown::type,
		sizeof(PyIDataObject),
		PyIDataObject_methods,
		GET_PYCOM_CTOR(PyIDataObject));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP PyGDataObject::GetData(
		/* [unique][in] */ FORMATETC * pformatetcIn,
		/* [out] */ STGMEDIUM * pmedium)
{
	PY_GATEWAY_METHOD;
	PyObject *obpformatetcIn = PyObject_FromFORMATETC(pformatetcIn);
	if (obpformatetcIn==NULL) return PyCom_HandlePythonFailureToCOM();
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetData", &result, "O", obpformatetcIn);
	Py_DECREF(obpformatetcIn);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	if (PySTGMEDIUM_Check(result)) {
		PySTGMEDIUM *pym = (PySTGMEDIUM *)result;
		memcpy(pmedium, &pym->medium, sizeof(STGMEDIUM));
		pym->DropOwnership();
	}
	hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGDataObject::GetDataHere(
		/* [unique][in] */ FORMATETC * pformatetc,
		/* [out][in] */ STGMEDIUM * pmedium)
{
	PY_GATEWAY_METHOD;
	PyObject *obpformatetc = PyObject_FromFORMATETC(pformatetc);
	if (obpformatetc==NULL) return PyCom_HandlePythonFailureToCOM();
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetDataHere", &result, "O", obpformatetc);
	Py_DECREF(obpformatetc);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	if (PySTGMEDIUM_Check(result)) {
		PySTGMEDIUM *pym = (PySTGMEDIUM *)result;
		memcpy(pmedium, &pym->medium, sizeof(STGMEDIUM));
		pym->DropOwnership();
	}
	hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGDataObject::QueryGetData(
		/* [unique][in] */ FORMATETC * pformatetc)
{
	PY_GATEWAY_METHOD;
	PyObject *obpformatetc = PyObject_FromFORMATETC(pformatetc);
	if (obpformatetc==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("QueryGetData", NULL, "O", obpformatetc);
	Py_DECREF(obpformatetc);
	return hr;
}

STDMETHODIMP PyGDataObject::GetCanonicalFormatEtc(
		/* [unique][in] */ FORMATETC * pformatectIn,
		/* [out] */ FORMATETC * pformatetcOut)
{
	PY_GATEWAY_METHOD;
	PyObject *obpformatectIn = PyObject_FromFORMATETC(pformatectIn);
	if (obpformatectIn==NULL) return PyCom_HandlePythonFailureToCOM();
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("GetCanonicalFormatEtc", &result, "O", obpformatectIn);
	Py_DECREF(obpformatectIn);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject_AsFORMATETC(result, pformatetcOut);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGDataObject::SetData(
		/* [unique][in] */ FORMATETC * pformatetc,
		/* [unique][in] */ STGMEDIUM * pmedium,
		/* [in] */ BOOL fRelease)
{
	PY_GATEWAY_METHOD;
	PyObject *obpformatetc = PyObject_FromFORMATETC(pformatetc);
	if (obpformatetc==NULL) return PyCom_HandlePythonFailureToCOM();
	PySTGMEDIUM *obmedium = PyObject_FromSTGMEDIUM(pmedium);
	if (obmedium==NULL) return PyCom_HandlePythonFailureToCOM();
	HRESULT hr=InvokeViaPolicy("SetData", NULL, "OOi", obpformatetc, obmedium, fRelease);
	if (!fRelease)
		obmedium->DropOwnership();
	Py_DECREF(obpformatetc);
	Py_DECREF(obmedium);
	return hr;
}

STDMETHODIMP PyGDataObject::EnumFormatEtc(
		/* [in] */ DWORD dwDirection,
		/* [out] */ IEnumFORMATETC ** ppenumFormatEtc)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("EnumFormatEtc", &result, "l", dwDirection);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppenumFormatEtc;
	if (!PyArg_Parse(result, "O" , &obppenumFormatEtc)) return PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obppenumFormatEtc, IID_IEnumFORMATETC, (void **)ppenumFormatEtc, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGDataObject::DAdvise(
		/* [in] */ FORMATETC * pformatetc,
		/* [in] */ DWORD advf,
		/* [unique][in] */ IAdviseSink * pAdvSink,
		/* [out] */ DWORD * pdwConnection)
{
	PY_GATEWAY_METHOD;
	PyObject *obpformatetc = PyObject_FromFORMATETC(pformatetc);
	if (obpformatetc==NULL) return PyCom_HandlePythonFailureToCOM();
	PyObject *obpAdvSink;
	obpAdvSink = PyCom_PyObjectFromIUnknown(pAdvSink, IID_IAdviseSink, TRUE);
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("DAdvise", &result, "OlO", obpformatetc, advf, obpAdvSink);
	Py_DECREF(obpformatetc);
	Py_XDECREF(obpAdvSink);
	if (FAILED(hr)) return hr;
	*pdwConnection = PyInt_AsLong(result);
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGDataObject::DUnadvise(
		/* [in] */ DWORD dwConnection)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("DUnadvise", NULL, "l", dwConnection);
	return hr;
}

STDMETHODIMP PyGDataObject::EnumDAdvise(
		/* [out] */ IEnumSTATDATA ** ppenumAdvise)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("EnumDAdvise", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
	PyObject *obppenumAdvise;
	if (!PyArg_Parse(result, "O" , &obppenumAdvise)) return PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyCom_InterfaceFromPyInstanceOrObject(obppenumAdvise, IID_IEnumSTATDATA, (void **)ppenumAdvise, TRUE /* bNoneOK */))
		 bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
	Py_DECREF(result);
	return hr;
}

